/*
 * Copyright (c) 2010-2014. Axon Framework
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.axonframework.correlation;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

/**
 * DataHolder for meta data entries that need to be attached to messages being generated by this thread. Infrastructure
 * components that send messages to a CommandBus or an EventBus should check this data holder for correlation data
 * to attach to these messages.
 *
 * @author Allard Buijze
 * @see org.axonframework.eventhandling.EventTemplate
 * @see org.axonframework.commandhandling.gateway.DefaultCommandGateway
 * @see org.axonframework.commandhandling.gateway.GatewayProxyFactory
 * @see org.axonframework.correlation.CorrelationDataProvider
 * @since 2.3
 */
public final class CorrelationDataHolder {

    private static ThreadLocal<Map<String, ?>> correlationData = new ThreadLocal<Map<String, ?>>();

    private CorrelationDataHolder() {
    }

    /**
     * Returns the correlation data attached to the current thread. If no correlation data is available, this method
     * returns an empty Map.
     *
     * @return the correlation data attached to the current thread
     */
    public static Map<String, ?> getCorrelationData() {
        final Map<String, ?> data = correlationData.get();
        if (data == null) {
            return Collections.emptyMap();
        }
        return data;
    }

    /**
     * Attaches the given <code>data</code> as correlation data to the current thread. Any data already attached is
     * replaced with given <code>data</code>.
     * <p/>
     * Note that you should call {@link #clear()} to remove attached values when exiting the execution scope in which
     * the correlation data is value. Failure to do so may result in memory leaks or faulty correlation data on
     * messages.
     *
     * @param data the correlation data to attach to the current thread
     */
    public static void setCorrelationData(Map<String, ?> data) {
        if (data == null) {
            clear();
        } else {
            correlationData.set(new HashMap<String, Object>(data));
        }
    }

    /**
     * Clears the correlation data from the current thread.
     */
    public static void clear() {
        correlationData.remove();
    }
}
