package com.sundy.axon.unitofwork;

/**
 * 该类代表一个能够修改聚合根的工作单元，一个典型的工作单元的范围是一个命令的执行。一个工作单元主要用于，防止在聚合根被处理完成前，单个的事件被发布出去。
 * 它也能通过仓库来管理资源，比如 锁。事务，比如锁在事件已提交或回滚后才能释放
 * <p/>
 * 获取当前工作单元 可以通过 {@link CurrentUnitOfWork#get()}
 * @author Administrator
 *
 */
public interface UnitOfWork {

	/**
	 * 提交工作单元，所有已注册但没有注册到相对应仓库的聚合根，缓存事件将会发送到对应的事件总线，所有已注册的工作单元监听器都将被通知
	 * <p/>
	 * 不管是否成功提交，该工作单元将会从CurrentUnitOfWork移除，并清理掉所有已占用资源，这也意味着，如果提交失败，所有东西被清掉
	 */
	void commit();
	
	/**
	 * 清理掉所有的缓存，所有的缓存事件和已注册的聚合根将会被丢弃  并且通知所有注册到该工作单元的监听器
	 * <p/>
	 * 如果 引起回滚的是因为异常，那么建议使用 {@link UnitOfWork#rollback()}
	 */
	void rollback();
	
	void rollback(Throwable cause);
	
	void start();
	
	boolean isStarted();
	
	boolean isTransactional();
	
	void registerListener(UnitOfWOrkListner listener);
	
	<T extends Aggregate> T registerAggregate(T aggregateRoot, EventBus eventBus, SaveAggregateCallback<T> saveAggregateCallback);
	
	void publishEvent(EventMessage<?> event, EventBus eventBus);
	
	void attachResource(String name, Object resource);
	
	void attachResource(String name, Object resource, boolean inherited);
	
	<T> T getResource(String name);
	
	void attachInheritedResources(UnitOfWork inheritingUnitOfWork);
	
}
